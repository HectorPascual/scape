Generic SOAP web service wrapper generator
==========================================

Quick start
-----------

Note: In order to build and run the web service, you will need the Java SE
Development Kit (JDK) version >=1.6.0, the underlying command line tool
installed on the deployment server, and a Apache Tomcat version >=6.0.18 or
equivalent servlet container with the Axis2 version >=1.4.1 web application
deployed. Apache Ant version >= 1.8.0 is required to build and deploy the web
service. See section "Requirements" for further information.

1) Configure the project by editing the configuration files:

   a) genericwrapper.properties
      Project configuration file defining name of the project context,
      name of the tool the web service provides access to, server
      parameters for deploying the service, etc.

   b) genericwrapper.sh and inputconfig.json
      Input and output data type configuration files, see the example files
      inputconfig.json and outputconfig.json provided in the root folder.
      The following properties can be defined for each variable:
      - Datatype - one of xsd:anyURI, xsd:string, xsd:boolean, xsd:int (required)
      - Restriction - An array of allowed values, e.g. ["One","Two","Three"] (optional)
      - CliMapping - Mapping to command line pattern variable, see property
                     service.cli.command.pattern in genericwrapper.properties
      - Default - Default value if using an array of allowed values (optional)
      - Cardinality - Use "list" for a string list input
      - Documentation - Documentation for the variable

2) Run the project generator (default arguments):

       java -jar genericwrapper.jar

   or with other arguments:

       java -jar genericwrapper.jar 

   The project will be created in the "generated" folder.

3) Adapt the service Java code following the TODO markers:

       generated/SomeTool/<project.package.path>/service/PROJECTSomeToolServiceSkeleton.java

4) Follow instructions in the README file of the generated project.

Project structure
-----------------

- ctmpl
  Code snippet templates used for code insertion.

- generated
  Folder where the generated SOAP web service wrapper projects will be stored.

- lib
  Libraries required for compiling the generated axis 2 web service project
  using ant.

- src
  Java sources of the Generic SOAP web service wrapper generator

- target
  Build files

- template
  Project template (substitution variables in the template files), e.g.
  #GLOBAL_PROJECT_VERSION# will be replaced by the version number defined
  in the project configuration file (genericwrapper.properties).

- genericwrapper.jar
  Java binary executable (execute "java -jar genericwrapper.jar")

- genericwrapper.properties
  Project configuration file

- inputconfig.json
  Input data types configuration file

- LICENSE
  Apache 2 license

- outputconfig.json
  Output data types configuration file

- pom.xml
  Maven file

- README
  This file

Requirements
------------

If you want to create a web service for an existing command line application
using this java based generic web service wrapper, the following software is
required:

- Underlying command line tool of this web service wrapper installed in a path
  without white spaces.
  Install the underlying command line tool of the generic web service wrapper
  on your system.
  IMPORTANT: THE UNDERLYING COMMAND LINE TOOL FOR THE SERVICE SHOULD BE 
  INSTALLED IN A PATH WITHOUT WHITE SPACES. OTHERWISE A FULL PATH CALL TO THE
  COMMAND LINE TOOL WILL NOT WORK CORRECTLY. 

- Java SE Development Kit (JDK), JDK 6 Update 12 or higher
  Please download the Java SE SDK for your system at
  http://java.sun.com/javaee/downloads/.

- Apache Tomcat server Version 6.0.18 or higher
  Please download and install the Apache Tomcat Server 6.0.18 here
  http://tomcat.apache.org/download-60.cgi and follow the instructions
  of the RUNNING.txt in your apache tomcat directory. There you will also find
  the information on how to configure and start the apache tomcat server.

- Apache Axis2/Java Version 1.4.1 or higher
  Apache Axis is an implementation of the SOAP ("Simple Object Access Protocol")
  submission  to W3C. You only need the Web Application Archive (WAR) which
  must be deployed to your Tomcat web applications directory.
  http://ws.apache.org/axis2

Securing the Web Service
------------------------

For interoperability reasons, you can establish simple security for the web services
using basic HTTP-Authentication which is provided by the
web application container or any web server which you are using as frontend
server.

Using the Apache2 webserver as frontend, you can configure the
HTTP-Authentication as follows (example for Linux):

1) Create a password file for a new user
       htpasswd -c /usr/local/apache2/pwds newuser
2) Configure access restriction in your httpd.conf, e.g. in
       /usr/local/apache2/httpd.conf
  restricting the access to the axis2 location (depends on the path):
    <Location /axis2>
        AuthName "only for registered users"
        AuthType Basic
        AuthUserFile "/usr/local/apache2/pwds"
        <Limit GET>
            require valid-user
        </Limit>
    </Location>

Also in the Apache Tomcat web server you can secure the web service
via basic HTTP-Authentication (example for Linux):

1) Configure the web.xml of the axis2 web application:
      /usr/local/java/apache-tomcat-6.0.18/webapps/axis2/WEB-INF/web.xml
    and add the following:
      <web-app>
      â€¦
        <security-constraint>
          <web-resource-collection>
              <web-resource-name>secured services</web-resource-name>
              <url-pattern>/services/*</url-pattern>
          </web-resource-collection>
          <auth-constraint>
              <role-name>webservice</role-name>
          </auth-constraint>
        </security-constraint>
        <login-config>
          <auth-method>BASIC</auth-method>
          <realm-name>webservice</realm-name>
        </login-config>
     </web-app>

2) This requires the user "webservice" to be defined in the tomcat-users.xml:
       /usr/local/java/apache-tomcat-6.0.18/conf/tomcat-users.xml
    as follows:
       <?xml version="1.0" encoding="utf-8">
       <tomcat-users>
           <role rolename="webservice"/>
           <user username="tomcat" password="100%OCR" roles="webservice"/>
       </tomcat-users>

Note: In a productive environment the web service should be offered over SSH.

Logging
-------
For logging log4j is used for the demonstrator platform.
The client places logfiles in the project subdirectory "log".
If you want the service to log in the same directory, please adapt the
Axis2 configuration accordingly. Change the log4j properties in the file
    ${local.tomcat.base.dir}/${local.tomcat.axis.dir}/WEB-INF/classes/log4j.properties
e.g.
    /usr/local/java/apache-tomcat-6.0.18/webapps/axis2/WEB-INF/classes/log4j.properties
You can indicate to create a log file:
    log4j.rootCategory=INFO, CONSOLE, LOGFILE
and specify the log file itself:
    log4j.appender.LOGFILE.File=log/project-service.log



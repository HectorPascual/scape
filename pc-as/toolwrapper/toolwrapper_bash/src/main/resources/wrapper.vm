#[[#!/bin/bash

################################################################################
#                  Copyright 2012 The SCAPE Project Consortium
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#                   http://www.apache.org/licenses/LICENSE-2.0              
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

#################
#  HOT-TOPICS   #
#################
#1# piping to SDTOUT may cause problems when dealing with containers that have special characteristics (like initial or ending file markers)

#################
#   functions   #
#################]]#
show_help(){
	echo -e "$usageDescription\nFor more information about the tool \"$toolName\" see: $toolHomepage"
	echo
	echo "Usage: $0 $usageInputParameter $usageOutputParameter"
	echo -e "Where:\n\t$usageInputParameterDescription\n\t$usageOutputParameterDescription"
	exit 1
}

parse_arguments(){
	i=0
	o=0
	stdin=0
	stdout=0
	while [ "$1" != "" ];
	do
		case $1 in
			-h) 	show_help
			;;
	
			-i)
				shift
				input=1
				output=0
				i=$(($i+1))
			;;
	
			-p)
				shift
				parameters=$1
				shift
				input=0
				output=0
			;;
	
			-o)
				shift
				output=1
				input=0
				o=$(($o+1))
			;;
		
			*)
				if [ "$input" == "1" ]; then
					#foreach( $input in $listOfInputs )
	if [ $i -eq $foreach.count ]; then
							input_files$foreach.count+=("$1")
						fi
					#end
	if [ "$1" == "STDIN" ]; then                
                     stdin=1
                  fi
				fi
				if [ "$output" == "1" ]; then
					#foreach( $output in $listOfOutputs )
	if [ $o -eq $foreach.count ]; then
							output_files$foreach.count+=("$1")
						fi
					#end
	if [ "$1" == "STDOUT" ]; then                
                     stdout=1
                  fi
fi
				shift
		esac
	done
}

execute_command(){
	$command
	return $?
}

verify_stdin(){
   tmp_input="/tmp/input`date +%s`"
   if [ $stdin -eq 1 ]; then
      dd of=$tmp_input >/dev/null 2>/dev/null
      input_files1=()
      input_files1+=("$tmp_input")
   fi
}

verify_stdout(){
   tmp_output="/tmp/output`date +%s`"
   if [ $stdout -eq 1 ]; then
      output_files1=()
      output_files1+=("$tmp_output")
   fi
}

verify_stdout_2(){
   if [ $stdout -eq 1 ]; then
      dd if=${output_files1[0]} 2>/dev/null
   fi
}

#[[
#################
#   real deal   #
#################]]#
parse_arguments "$@"

verify_stdin

verify_stdout

execute_command
command_execution_exit_code=$?

verify_stdout_2

exit 0
